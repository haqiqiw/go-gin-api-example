// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	auth "go-api-example/internal/auth"

	mock "github.com/stretchr/testify/mock"
)

// JWTToken is an autogenerated mock type for the JWTToken type
type JWTToken struct {
	mock.Mock
}

// Create provides a mock function with given fields: userID
func (_m *JWTToken) Create(userID string) (string, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Parse provides a mock function with given fields: jwtToken
func (_m *JWTToken) Parse(jwtToken string) (*auth.JWTClaims, error) {
	ret := _m.Called(jwtToken)

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 *auth.JWTClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*auth.JWTClaims, error)); ok {
		return rf(jwtToken)
	}
	if rf, ok := ret.Get(0).(func(string) *auth.JWTClaims); ok {
		r0 = rf(jwtToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.JWTClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(jwtToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewJWTToken creates a new instance of JWTToken. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJWTToken(t interface {
	mock.TestingT
	Cleanup(func())
}) *JWTToken {
	mock := &JWTToken{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
