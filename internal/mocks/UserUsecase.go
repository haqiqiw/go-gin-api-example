// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	model "go-api-example/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, req
func (_m *UserUsecase) Create(ctx context.Context, req *model.CreateUserRequest) (*model.UserResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateUserRequest) (*model.UserResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateUserRequest) *model.UserResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.CreateUserRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, req
func (_m *UserUsecase) FindByID(ctx context.Context, req *model.GetUserRequest) (*model.UserResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *model.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetUserRequest) (*model.UserResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetUserRequest) *model.UserResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetUserRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, req
func (_m *UserUsecase) List(ctx context.Context, req *model.SearchUserRequest) ([]model.UserResponse, int, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []model.UserResponse
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.SearchUserRequest) ([]model.UserResponse, int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.SearchUserRequest) []model.UserResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.SearchUserRequest) int); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *model.SearchUserRequest) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateByID provides a mock function with given fields: ctx, req
func (_m *UserUsecase) UpdateByID(ctx context.Context, req *model.UpdateUserRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateUserRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
